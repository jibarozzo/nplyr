% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nest_join.R
\name{nest-filter-joins}
\alias{nest-filter-joins}
\alias{nest_semi_join}
\alias{nest_anti_join}
\title{Nested filtering joins}
\usage{
nest_semi_join(.data, .nest_data, y, by = NULL, copy = FALSE, ...)

nest_anti_join(.data, .nest_data, y, by = NULL, copy = FALSE, ...)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g., a tibble), or a lazy
data frame (e.g. from dbplyr or dtplyr).}

\item{.nest_data}{A list-column containing data frames}

\item{y}{A data frame, data frame extension (e.g., a tibble), or a lazy data
frame (e.g., from dbplyr or dtplyr).}

\item{by}{A character vector of variables to join by or a join specification
created with \code{join_by()}.}

\item{copy}{If \code{.nest_data} and \code{y} are not from the same data source and
\code{copy = TRUE} then \code{y} will be copied into the same src as \code{.nest_data}.
\emph{(Need to review this parameter in more detail for applicability with nplyr)}}

\item{...}{Other parameters passed onto methods. Includes:
\itemize{
\item \code{na_matches} : Should two \code{NA} or two \code{NaN} values match?
\itemize{
\item \code{"na"}, the default, treats two \code{NA} or two \code{NaN} values as equal.
\item \code{"never"} treats two \code{NA} or two \code{NaN} values as different, and will
never match them together or to any other values.
}
\item \code{multiple} : Handlind of rows in \code{.nest_data} with multiple matches in \code{y}.
\itemize{
\item \code{"all"} returns every match detected in \code{y}.
\item \code{"any"} returns one match detected in \code{y}, with no guarantees on which
match will be returned. It is often faster than \code{"first"} and \code{"last"} if
you just need to detect if there is at least one match.
\item \code{"first"} returns the first match detected in \code{y}.
\item \code{"last"} returns the last match detected in \code{y}.
\item \code{"warning"} throws a warning if multiple matches are detected, and then
falls back to \code{"all"}.
\item \code{"error"} throws an error if multiple matches are detected.
}
\item \code{unmatched} : How should unmatched keys that would result in dropped rows
be handled?
\itemize{
\item \code{"drop"} drops unmatched keys from the result.
\item \code{"error"} throws an error if unmatched keys are detected.
}
}}
}
\description{
Nested filtering joins filter rows from \code{.nest_data} based on the presence or
absence of matches in \code{y}:
\itemize{
\item \code{nest_semi_join()} returns all rows from \code{.nest_data} with a match in \code{y}.
\item \code{nest_anti_join()} returns all rows from \code{.nest_data} with\emph{out} a match in \code{y}.
}

\code{nest_semi_join()} and \code{nest_anti_join()} are largely wrappers for
\code{\link[dplyr:filter-joins]{dplyr::semi_join()}} and \code{\link[dplyr:filter-joins]{dplyr::anti_join()}} and maintain the functionality
of \code{semi_join()} and \code{anti_join()} within each nested data frame. For more
information on \code{semi_join()} or \code{anti_join()}, please refer to the
documentation in \href{https://dplyr.tidyverse.org/}{\code{dplyr}}.
}
\examples{
\dontrun{
gm_nest <- gapminder::gapminder \%>\% tidyr::nest(country_data = -continent)
gm_codes <- gapminder::country_codes \%>\% dplyr::slice_sample(n = 10)

gm_nest \%>\% nest_semi_join(country_data, gm_codes, by = "country")
gm_nest \%>\% nest_anti_join(country_data, gm_codes, by = "country")
}

}
\seealso{
Other joins: 
\code{\link{nest-mutate-joins}},
\code{\link{nest_nest_join}()}
}
\concept{joins}
