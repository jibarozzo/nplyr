% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nest_arrange.R
\name{nest_arrange}
\alias{nest_arrange}
\title{Arrange rows within a nested data frame by column values}
\usage{
nest_arrange(.data, .nest_data, ..., .by_group = FALSE)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble), or a lazy
lazy data frame (e.g. from dbplyr or dtplyr).}

\item{.nest_data}{A list-col containing a data frames (or tibbles).}

\item{...}{data masking variables, or functions of
variables. Use \code{dplyr::desc()} to sort a variable in descending order.}

\item{.by_group}{If \code{TRUE}, will sort first by grouping variable. Applies to
grouped data frames only.}
}
\value{
A tibble or dataframe. When printed to the console, the returned object will
appear visually similar to the object passed to \code{nest_arrange()}; the rows
within each nested tibble/dataframe, however, will be reordered by the columns
passed to \code{...}.
}
\description{
\code{nest_arrange()} orders the rows of a nested data frame by the values of
selected columns. This is largely a wrapper around \code{dplyr::arrange()} - please
refer to \code{dplyr} documentation for more details.
}
\examples{
\dontrun{
library(gapminder)
library(tidyverse)

# create nested tibbles by continent from the gapminder dataset
# then arrange by population *within* each nested tibble.
gapminder \%>\%
  nest(country_data = -continent) \%>\%
  nest_arrange(country_data, pop)
}
}
