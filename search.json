[{"path":"https://markjrieke.github.io/nplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Mark Rieke Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://markjrieke.github.io/nplyr/articles/Use-case-for-nplyr.html","id":"a-motivating-example","dir":"Articles","previous_headings":"","what":"A motivating example","title":"Use case for nplyr","text":"Consider set surveys organization might use gather market data. common organizations separate surveys separate purposes gather baseline set data across surveys (example, respondent’s age gender may recorded across surveys, survey different set questions). Let’s use two fake surveys questions example:","code":""},{"path":"https://markjrieke.github.io/nplyr/articles/Use-case-for-nplyr.html","id":"survey-1-job","dir":"Articles","previous_headings":"","what":"Use case for nplyr","title":"Use case for nplyr","text":"old ? (multiple choice) city live ? (multiple choice) field work ? (multiple choice) Overall, satisfied job? (multiple choice) annual salary? (numeric entry)","code":""},{"path":"https://markjrieke.github.io/nplyr/articles/Use-case-for-nplyr.html","id":"survey-2-personal-life","dir":"Articles","previous_headings":"","what":"Use case for nplyr","title":"Use case for nplyr","text":"old ? (multiple choice) city live (multiple choice) field work ? (multiple choice) Overall, satisfied personal life (multiple choice) Please provide additional detail (text entry) scenario, surveys collecting demographic information — age, location, industry — differ questions. convenient way get response files environment use purrr::map() read file nested data frame. tidyr::unnest() can usually handle idiosyncrasies layout unnesting case unnesting throws error! surveys share column names necessarily column types! case, data frames contain column named “Q5”, job_survey ’s double personal_survey ’s character. potentially get around issue unnesting reading columns characters via readr::read_csv(x, col_types = cols(.default = \"c\")), presents challenges. Q5 still better represented double job_survey survey question text Q4 similar, distinctly different, meanings across survey files. nplyr comes play! Rather malign data types create separate objects survey file, can use nplyr perform operations directly nested data frames.","code":"path <- \"https://raw.githubusercontent.com/markjrieke/nplyr/main/data-raw/\"  surveys <-    tibble::tibble(survey_file = c(\"job_survey\", \"personal_survey\")) %>%   mutate(survey_data = purrr::map(survey_file, ~readr::read_csv(paste0(path, .x, \".csv\"))))  surveys #> # A tibble: 2 × 2 #>   survey_file     survey_data          #>   <chr>           <list>               #> 1 job_survey      <spc_tbl_ [500 × 6]> #> 2 personal_survey <spc_tbl_ [750 × 6]> surveys %>%   tidyr::unnest(survey_data) #> Error in `list_unchop()`: #> ! Can't combine `x[[1]]$Q5` <double> and `x[[2]]$Q5` <character>. surveys %>%   slice(1) %>%   tidyr::unnest(survey_data) %>%   glimpse() #> Rows: 500 #> Columns: 7 #> $ survey_file <chr> \"job_survey\", \"job_survey\", \"job_survey\", \"job_survey\", \"j… #> $ survey_name <chr> \"job\", \"job\", \"job\", \"job\", \"job\", \"job\", \"job\", \"job\", \"j… #> $ Q1          <dbl> 100, 81, 51, 81, 80, 32, 65, 57, 43, 94, 25, 83, 61, 66, 8… #> $ Q2          <chr> \"Austin\", \"San Antonio\", \"Austin\", \"Austin\", \"Dallas\", \"Fo… #> $ Q3          <chr> \"Consulting\", \"Consulting\", \"Consulting\", \"Technology\", \"C… #> $ Q4          <chr> \"Somewhat dissatisfied\", \"Neither satisfied nor dissatisfi… #> $ Q5          <dbl> 163, 48, 190, 25, 143, 233, 43, 243, 158, 235, 245, 195, 2…  surveys %>%   slice(2) %>%   tidyr::unnest(survey_data) %>%   glimpse() #> Rows: 750 #> Columns: 7 #> $ survey_file <chr> \"personal_survey\", \"personal_survey\", \"personal_survey\", \"… #> $ survey_name <chr> \"personal\", \"personal\", \"personal\", \"personal\", \"personal\"… #> $ Q1          <dbl> 91, 32, 40, 23, 88, 69, 96, 40, 57, 40, 39, 70, 29, 38, 57… #> $ Q2          <chr> \"Austin\", \"San Antonio\", \"San Antonio\", \"Austin\", \"Dallas\"… #> $ Q3          <chr> \"Energy\", \"Healthcare\", \"Consulting\", \"Consulting\", \"Techn… #> $ Q4          <chr> \"Neither satisfied nor dissatisfied\", \"Extremely satisfied… #> $ Q5          <chr> \"Blandit eros! A, ligula facilisis imperdiet! Interdum pla… surveys <-    surveys %>%   nest_mutate(survey_data,               age_group = if_else(Q1 < 65, \"Adult\", \"Retirement Age\")) %>%   nest_group_by(survey_data, Q3) %>%   nest_add_count(survey_data,                   name = \"n_respondents_in_industry\") %>%   nest_mutate(survey_data,                median_industry_age = median(Q1)) %>%   nest_ungroup(survey_data)  surveys %>%   slice(1) %>%   tidyr::unnest(survey_data) #> # A tibble: 500 × 10 #>    survey_file survey_name    Q1 Q2    Q3    Q4       Q5 age_g…¹ n_res…² media…³ #>    <chr>       <chr>       <dbl> <chr> <chr> <chr> <dbl> <chr>     <int>   <dbl> #>  1 job_survey  job           100 Aust… Cons… Some…   163 Retire…     107    57   #>  2 job_survey  job            81 San … Cons… Neit…    48 Retire…     107    57   #>  3 job_survey  job            51 Aust… Cons… Extr…   190 Adult       107    57   #>  4 job_survey  job            81 Aust… Tech… Extr…    25 Retire…     108    61.5 #>  5 job_survey  job            80 Dall… Cons… Extr…   143 Retire…     107    57   #>  6 job_survey  job            32 Fort… Ener… Some…   233 Adult        99    59   #>  7 job_survey  job            65 Dall… Cons… Some…    43 Retire…     107    57   #>  8 job_survey  job            57 Hous… Heal… Some…   243 Adult        75    65   #>  9 job_survey  job            43 Dall… Gove… Neit…   158 Adult       111    57   #> 10 job_survey  job            94 Fort… Heal… Extr…   235 Retire…      75    65   #> # … with 490 more rows, and abbreviated variable names ¹​age_group, #> #   ²​n_respondents_in_industry, ³​median_industry_age  surveys %>%   slice(2) %>%   tidyr::unnest(survey_data) #> # A tibble: 750 × 10 #>    survey_file     surve…¹    Q1 Q2    Q3    Q4    Q5    age_g…² n_res…³ media…⁴ #>    <chr>           <chr>   <dbl> <chr> <chr> <chr> <chr> <chr>     <int>   <dbl> #>  1 personal_survey person…    91 Aust… Ener… Neit… Blan… Retire…     145      61 #>  2 personal_survey person…    32 San … Heal… Extr… Elem… Adult       131      62 #>  3 personal_survey person…    40 San … Cons… Some… Eget… Adult       149      61 #>  4 personal_survey person…    23 Aust… Cons… Extr… Scel… Adult       149      61 #>  5 personal_survey person…    88 Dall… Tech… Neit… Aene… Retire…     150      61 #>  6 personal_survey person…    69 Fort… Tech… Neit… Inte… Retire…     150      61 #>  7 personal_survey person…    96 Hous… Heal… Extr… Blan… Retire…     131      62 #>  8 personal_survey person…    40 Hous… Cons… Extr… Scel… Adult       149      61 #>  9 personal_survey person…    57 Fort… Ener… Extr… Pede… Adult       145      61 #> 10 personal_survey person…    40 Fort… Heal… Extr… Phar… Adult       131      62 #> # … with 740 more rows, and abbreviated variable names ¹​survey_name, #> #   ²​age_group, ³​n_respondents_in_industry, ⁴​median_industry_age"},{"path":"https://markjrieke.github.io/nplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Rieke. Author, maintainer. Joran Elias. Contributor.","code":""},{"path":"https://markjrieke.github.io/nplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rieke M (2023). nplyr: Grammar Nested Data Manipulation. https://github.com/markjrieke/nplyr, https://markjrieke.github.io/nplyr/.","code":"@Manual{,   title = {nplyr: A Grammar of Nested Data Manipulation},   author = {Mark Rieke},   year = {2023},   note = {https://github.com/markjrieke/nplyr, https://markjrieke.github.io/nplyr/}, }"},{"path":"https://markjrieke.github.io/nplyr/index.html","id":"nplyr-","dir":"","previous_headings":"","what":"A Grammar of Nested Data Manipulation","title":"A Grammar of Nested Data Manipulation","text":"Author: Mark RiekeLicense: MIT","code":""},{"path":"https://markjrieke.github.io/nplyr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Grammar of Nested Data Manipulation","text":"nplyr grammar nested data manipulation allows users perform dplyr-like manipulations data frames nested within list-col another data frame. dplyr verbs nested equivalents nplyr. (non-exhaustive) list examples: nest_mutate() nested equivalent mutate() nest_select() nested equivalent select() nest_filter() nested equivalent filter() nest_summarise() nested equivalent summarise() nest_group_by() nested equivalent group_by() version 0.2.0, nplyr also supports nested versions tidyr functions: nest_drop_na() nested equivalent drop_na() nest_extract() nested equivalent extract() nest_fill() nested equivalent fill() nest_replace_na() nested equivalent replace_na() nest_separate() nested equivalent separate() nest_unite() nested equivalent unite() nplyr largely wrapper dplyr. --date information dplyr please visit dplyr’s website. new dplyr, best place start data transformation chapter R data science.","code":""},{"path":"https://markjrieke.github.io/nplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Grammar of Nested Data Manipulation","text":"can install released version nplyr CRAN development version github devtools remotes package:","code":"# install from CRAN install.packages(\"nplyr\")  # install from github devtools::install_github(\"markjrieke/nplyr\")"},{"path":"https://markjrieke.github.io/nplyr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Grammar of Nested Data Manipulation","text":"get started, ’ll create nested column country data within continent gapminder dataset. dplyr can perform operations top-level data frame, nplyr, can perform operations nested data frames: nplyr also supports grouped operations nest_group_by(): examples can found package vignettes function documentation.","code":"library(nplyr)  gm_nest <-    gapminder::gapminder_unfiltered %>%   tidyr::nest(country_data = -continent)  gm_nest #> # A tibble: 6 × 2 #>   continent country_data         #>   <fct>     <list>               #> 1 Asia      <tibble [578 × 5]>   #> 2 Europe    <tibble [1,302 × 5]> #> 3 Africa    <tibble [637 × 5]>   #> 4 Americas  <tibble [470 × 5]>   #> 5 FSU       <tibble [139 × 5]>   #> 6 Oceania   <tibble [187 × 5]> gm_nest_example <-    gm_nest %>%   nest_filter(country_data, year == max(year)) %>%   nest_mutate(country_data, pop_millions = pop/1000000)  # each nested tibble is now filtered to the most recent year gm_nest_example #> # A tibble: 6 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [43 × 6]> #> 2 Europe    <tibble [34 × 6]> #> 3 Africa    <tibble [53 × 6]> #> 4 Americas  <tibble [33 × 6]> #> 5 FSU       <tibble [9 × 6]>  #> 6 Oceania   <tibble [11 × 6]>  # if we unnest, we can see that a new column for pop_millions has been added gm_nest_example %>%   slice_head(n = 1) %>%   tidyr::unnest(country_data) #> # A tibble: 43 × 7 #>    continent country           year lifeExp        pop gdpPercap pop_millions #>    <fct>     <fct>            <int>   <dbl>      <int>     <dbl>        <dbl> #>  1 Asia      Afghanistan       2007    43.8   31889923      975.       31.9   #>  2 Asia      Azerbaijan        2007    67.5    8017309     7709.        8.02  #>  3 Asia      Bahrain           2007    75.6     708573    29796.        0.709 #>  4 Asia      Bangladesh        2007    64.1  150448339     1391.      150.    #>  5 Asia      Bhutan            2007    65.6    2327849     4745.        2.33  #>  6 Asia      Brunei            2007    77.1     386511    48015.        0.387 #>  7 Asia      Cambodia          2007    59.7   14131858     1714.       14.1   #>  8 Asia      China             2007    73.0 1318683096     4959.     1319.    #>  9 Asia      Hong Kong, China  2007    82.2    6980412    39725.        6.98  #> 10 Asia      India             2007    64.7 1110396331     2452.     1110.    #> # … with 33 more rows gm_nest_example <-    gm_nest %>%   nest_group_by(country_data, year) %>%   nest_summarise(     country_data,      n = n(),     lifeExp = median(lifeExp),     pop = median(pop),     gdpPercap = median(gdpPercap)   )  gm_nest_example #> # A tibble: 6 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [58 × 5]> #> 2 Europe    <tibble [58 × 5]> #> 3 Africa    <tibble [13 × 5]> #> 4 Americas  <tibble [57 × 5]> #> 5 FSU       <tibble [44 × 5]> #> 6 Oceania   <tibble [56 × 5]>  # unnesting shows summarised tibbles for each continent gm_nest_example %>%   slice(2) %>%   tidyr::unnest(country_data) #> # A tibble: 58 × 6 #>    continent  year     n lifeExp      pop gdpPercap #>    <fct>     <int> <int>   <dbl>    <dbl>     <dbl> #>  1 Europe     1950    22    65.8 7408264      6343. #>  2 Europe     1951    18    65.7 7165515      6509. #>  3 Europe     1952    31    65.9 7124673      5210. #>  4 Europe     1953    17    67.3 7346100      6774. #>  5 Europe     1954    17    68.0 7423300      7046. #>  6 Europe     1955    17    68.5 7499400      7817. #>  7 Europe     1956    17    68.5 7575800      8224. #>  8 Europe     1957    31    67.5 7363802      6093. #>  9 Europe     1958    18    69.6 8308052.     8833. #> 10 Europe     1959    18    69.6 8379664.     9088. #> # … with 48 more rows"},{"path":"https://markjrieke.github.io/nplyr/index.html","id":"bug-reportsfeature-requests","dir":"","previous_headings":"","what":"Bug reports/feature requests","title":"A Grammar of Nested Data Manipulation","text":"notice bug, want request new feature, recommendations improving documentation, please open issue package repository.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/job_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Example survey data regarding job satisfaction — job_survey","title":"Example survey data regarding job satisfaction — job_survey","text":"toy dataset containing 500 responses job satisfaction survey. responses randomly generated using Qualtrics survey platform.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/job_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example survey data regarding job satisfaction — job_survey","text":"","code":"job_survey"},{"path":"https://markjrieke.github.io/nplyr/reference/job_survey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example survey data regarding job satisfaction — job_survey","text":"data frame 500 rows 6 variables: survey_name name survey Q1 respondent age Q2 city respondent resides Q3 field respondent works Q4 respondent's job satisfaction (scale extremely satisfied extremely dissatisfied) Q5 respondent's annual salary, thousands dollars","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested filtering joins — nest-filter-joins","title":"Nested filtering joins — nest-filter-joins","text":"Nested filtering joins filter rows .nest_data based presence absence matches y: nest_semi_join() returns rows .nest_data match y. nest_anti_join() returns rows .nest_data without match y.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested filtering joins — nest-filter-joins","text":"","code":"nest_semi_join(.data, .nest_data, y, by = NULL, copy = FALSE, ...)  nest_anti_join(.data, .nest_data, y, by = NULL, copy = FALSE, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested filtering joins — nest-filter-joins","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames y data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). character vector variables join join specification created join_by(). NULL, default, nest_*_join() perform natural join, using variables common across object .nest_data y. message lists variables can check correct; suppress message supplying explicitly. join different variables objects .nest_data y, use named vector. example, = c(\"\" = \"b\") match .nest_data$y$b object .nest_data. join multiple variables, use vector length >1. example, = c(\"\", \"b\") match .nest_data$y$.nest_data$b y$b object .nest_data. Use named vector match different variables .nest_data y. example, = c(\"\" = \"b\", \"c\" = \"d\") match .nest_data$y$b .nest_data$c y$d object .nest_data. perform cross-join, generating combinations object .nest_data y, use = character(). copy .nest_data y data source copy = TRUE y copied src .nest_data. (Need review parameter detail applicability nplyr) ... One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested filtering joins — nest-filter-joins","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows subset input, appear order. Columns modified. Data frame attributes preserved. Groups taken .nest_data. number groups may reduced.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nested filtering joins — nest-filter-joins","text":"nest_semi_join() nest_anti_join() largely wrappers dplyr::semi_join() dplyr::anti_join() maintain functionality semi_join() anti_join() within nested data frame. information semi_join() anti_join(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest-filter-joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested filtering joins — nest-filter-joins","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent) gm_codes <- gapminder::country_codes %>% dplyr::slice_sample(n = 10)  gm_nest %>% nest_semi_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [48 × 5]> #> 2 Europe    <tibble [24 × 5]> #> 3 Africa    <tibble [12 × 5]> #> 4 Americas  <tibble [24 × 5]> #> 5 Oceania   <tibble [0 × 5]>  gm_nest %>% nest_anti_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [348 × 5]> #> 2 Europe    <tibble [336 × 5]> #> 3 Africa    <tibble [612 × 5]> #> 4 Americas  <tibble [276 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Mutating joins — nest-mutate-joins","title":"Nested Mutating joins — nest-mutate-joins","text":"Nested mutating joins add columns y nested data frames .nest_data, matching observations based keys. four nested mutating joins:","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Nested Mutating joins — nest-mutate-joins","text":"nest_inner_join() keeps observations .nest_data matching key y. important property inner join unmatched rows either input included result.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Nested Mutating joins — nest-mutate-joins","text":"three outer joins keep observations appear least one data frames: nest_left_join() keeps observations .nest_data. nest_right_join() keeps observations y. nest_full_join() keeps observations .nest_data y.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Mutating joins — nest-mutate-joins","text":"","code":"nest_inner_join(   .data,   .nest_data,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  nest_left_join(   .data,   .nest_data,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  nest_right_join(   .data,   .nest_data,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  nest_full_join(   .data,   .nest_data,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Mutating joins — nest-mutate-joins","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames y data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). character vector variables join join specification created join_by(). NULL, default, nest_*_join() perform natural join, using variables common across object .nest_data y. message lists variables can check correct; suppress message supplying explicitly. join different variables objects .nest_data y, use named vector. example, = c(\"\" = \"b\") match .nest_data$y$b object .nest_data. join multiple variables, use vector length >1. example, = c(\"\", \"b\") match .nest_data$y$.nest_data$b y$b object .nest_data. Use named vector match different variables .nest_data y. example, = c(\"\" = \"b\", \"c\" = \"d\") match .nest_data$y$b .nest_data$c y$d object .nest_data. perform cross-join, generating combinations object .nest_data y, use = character(). copy .nest_data y data source copy = TRUE y copied src .nest_data. (Need review parameter detail applicability nplyr) suffix non-joined duplicate variables .nest_data y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. Includes: na_matches : two NA two NaN values match? \"na\", default, treats two NA two NaN values equal. \"never\" treats two NA two NaN values different, never match together values. multiple : Handling rows .nest_data multiple matches y. \"\" returns every match detected y. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. \"warning\" throws warning multiple matches detected, falls back \"\". \"error\" throws error multiple matches detected. unmatched : unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. keep join keys .nest_data y preserved output?","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Mutating joins — nest-mutate-joins","text":"object type .data. object column .nest_data also type input. order rows columns object .nest_data preserved much possible. object .nest_data following properties: nest_inner_join(), subset rows object .nest_data. nest_left_join(), rows object .nest_data. nest_right_join(), subset rows object .nest_data, followed unmatched y rows. nest_full_join(), rows object .nest_data, followed unmatched y rows. Output columns include columns .nest_data non-key columns y. keep = TRUE, key columns y included well. non-key columns object .nest_data y name, suffixes added disambiguate. keep = TRUE key columns .nest_data y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type objects .nest_data y. Groups taken .nest_data.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nested Mutating joins — nest-mutate-joins","text":"nest_inner_join(), nest_left_join(), nest_right_join(), nest_full_join() largely wrappers dplyr::inner_join(), dplyr::left_join(), dplyr::right_join(), dplyr::full_join() maintain functionality verbs within nested data frame. information inner_join(), left_join(), right_join(), full_join(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest-mutate-joins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested Mutating joins — nest-mutate-joins","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent) gm_codes <- gapminder::country_codes  gm_nest %>% nest_inner_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 7]> #> 2 Europe    <tibble [360 × 7]> #> 3 Africa    <tibble [624 × 7]> #> 4 Americas  <tibble [300 × 7]> #> 5 Oceania   <tibble [24 × 7]>  gm_nest %>% nest_left_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 7]> #> 2 Europe    <tibble [360 × 7]> #> 3 Africa    <tibble [624 × 7]> #> 4 Americas  <tibble [300 × 7]> #> 5 Oceania   <tibble [24 × 7]>  gm_nest %>% nest_right_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [550 × 7]> #> 2 Europe    <tibble [517 × 7]> #> 3 Africa    <tibble [759 × 7]> #> 4 Americas  <tibble [462 × 7]> #> 5 Oceania   <tibble [209 × 7]> gm_nest %>% nest_full_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [550 × 7]> #> 2 Europe    <tibble [517 × 7]> #> 3 Africa    <tibble [759 × 7]> #> 4 Americas  <tibble [462 × 7]> #> 5 Oceania   <tibble [209 × 7]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange rows within a nested data frames by column values — nest_arrange","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":"nest_arrange() orders rows nested data frames values selected columns.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":"","code":"nest_arrange(.data, .nest_data, ..., .by_group = FALSE)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Variables, functions variables. Use dplyr::desc() sort variable descending order. .by_group TRUE, sort first grouping variable. Applies grouped data frames .","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: rows appear output, (usually) different place. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":"nest_arrange() largely wrapper dplyr::arrange() maintains functionality arrange() within nested data frame. information arrange(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange rows within a nested data frames by column values — nest_arrange","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  gm_nest %>%    nest_arrange(country_data, pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>   gm_nest %>%   nest_arrange(country_data, desc(pop)) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations in a nested data frame by group — nest_count","title":"Count observations in a nested data frame by group — nest_count","text":"nest_count() lets quickly count unique values one variables within nested data frame. nest_count() results summary one row per set variables count . nest_add_count() equivalent exception retains rows adds new column group-wise counts.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations in a nested data frame by group — nest_count","text":"","code":"nest_count(.data, .nest_data, ..., wt = NULL, sort = FALSE, name = NULL)  nest_add_count(.data, .nest_data, ..., wt = NULL, sort = FALSE, name = NULL)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count observations in a nested data frame by group — nest_count","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Variables group . wt Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count observations in a nested data frame by group — nest_count","text":"object type .data. object column .nest_data also type input. nest_count() nest_add_count() group object .nest_data transiently, output returned .nest_data groups input.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count observations in a nested data frame by group — nest_count","text":"nest_count() nest_add_count() largely wrappers dplyr::count() dplyr::add_count() maintain functionality count() add_count() within nested data frame. information count() add_count(), please refer documentation dplyr.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count observations in a nested data frame by group — nest_count","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # count the number of times each country appears in each nested tibble gm_nest %>% nest_count(country_data, country) #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [33 × 2]> #> 2 Europe    <tibble [30 × 2]> #> 3 Africa    <tibble [52 × 2]> #> 4 Americas  <tibble [25 × 2]> #> 5 Oceania   <tibble [2 × 2]>  gm_nest %>% nest_add_count(country_data, country) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 6]> #> 2 Europe    <tibble [360 × 6]> #> 3 Africa    <tibble [624 × 6]> #> 4 Americas  <tibble [300 × 6]> #> 5 Oceania   <tibble [24 × 6]>   # count the sum of population for each country in each nested tibble gm_nest %>% nest_count(country_data, country, wt = pop) #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [33 × 2]> #> 2 Europe    <tibble [30 × 2]> #> 3 Africa    <tibble [52 × 2]> #> 4 Americas  <tibble [25 × 2]> #> 5 Oceania   <tibble [2 × 2]>  gm_nest %>% nest_add_count(country_data, country, wt = pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 6]> #> 2 Europe    <tibble [360 × 6]> #> 3 Africa    <tibble [624 × 6]> #> 4 Americas  <tibble [300 × 6]> #> 5 Oceania   <tibble [24 × 6]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset distinct/unique rows within a nested data frame — nest_distinct","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":"nest_distinct() selects unique/distinct rows nested data frame.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":"","code":"nest_distinct(.data, .nest_data, ..., .keep_all = FALSE)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Optional variables use determining uniqueness. multiple rows given combination inputs, first row preserved. omitted, use variables. .keep_all TRUE, keep variables .nest_data. combination ... distinct, keeps first row values.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows subset input appear order. Columns modified ... empty .keep_all TRUE. Otherwise, nest_distinct() first calls dplyr::mutate() create new columns within object .nest_data. Groups modified. Data frame attributes preserved.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":"nest_distinct() largely wrapper dplyr::distinct() maintains functionality distinct() within nested data frame. information distinct(), please refer documentation dplyr.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset distinct/unique rows within a nested data frame — nest_distinct","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  gm_nest %>% nest_distinct(country_data, country) #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [33 × 1]> #> 2 Europe    <tibble [30 × 1]> #> 3 Africa    <tibble [52 × 1]> #> 4 Americas  <tibble [25 × 1]> #> 5 Oceania   <tibble [2 × 1]>  gm_nest %>% nest_distinct(country_data, country, year) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 2]> #> 2 Europe    <tibble [360 × 2]> #> 3 Africa    <tibble [624 × 2]> #> 4 Americas  <tibble [300 × 2]> #> 5 Oceania   <tibble [24 × 2]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":"nest_drop_na() used drop rows data frame column nested data frames.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":"","code":"nest_drop_na(.data, .nest_data, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Columns within .nest_data inspect missing values. empty, columns within dataframe .nest_data used.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":"object type .data. object column .nest_data rows dropped according presence NAs.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":"nest_drop_na() wrapper tidyr::drop_na() maintains functionality drop_na() within nested data frame. information drop_na() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_drop_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop rows containing missing values in a column of nested data frames — nest_drop_na","text":"","code":"gm <- gapminder::gapminder   # randomly insert NAs into the dataframe & nest set.seed(123)  gm <- gm %>% mutate(pop = if_else(runif(nrow(gm)) >= 0.9, NA_integer_, pop)) gm_nest <- gm %>% tidyr::nest(country_data = -continent)  # drop rows where an NA exists in column `pop` gm_nest %>% nest_drop_na(.nest_data = country_data,pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [364 × 5]> #> 2 Europe    <tibble [326 × 5]> #> 3 Africa    <tibble [572 × 5]> #> 4 Americas  <tibble [273 × 5]> #> 5 Oceania   <tibble [23 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":"nest_extract() used extract capturing groups column nested data frame using regular expressions new column. groups match, input NA, output NA.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":"","code":"nest_extract(   .data,   .nest_data,   col,   into,   regex = \"([[:alnum:]]+)\",   remove = TRUE,   convert = FALSE,   ... )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames col Column name position within .nest_data (must present within nested data frames .nest_data). passed tidyselect::vars_pull(). argument passed expression supports quasiquotation (can unquote column names column positions). Names new variables create character vector. Use NA omit variable output. regex string representing regular expression used extract desired values. one group (defined ()) element . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. ... Additional arguments passed tidyr::extract() methods.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":"object type .data. object column .nest_data new columns created according capture groups specified regular expression.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":"nest_extract() wrapper tidyr::extract() maintains functionality extract() within nested data frame. information extract() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a character column into multiple columns using regex groups in a column of nested data frames — nest_extract","text":"","code":"set.seed(123) gm <- gapminder::gapminder  gm <- gm %>% mutate(comb = sample(c(NA, \"a-b\", \"a-d\", \"b-c\", \"d-e\"),size = nrow(gm),replace = TRUE)) gm_nest <- gm %>% tidyr::nest(country_data = -continent)  gm_nest %>%    nest_extract(.nest_data = country_data,                col = comb,                into = c(\"var1\",\"var2\"),                regex = \"([[:alnum:]]+)-([[:alnum:]]+)\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 7]> #> 2 Europe    <tibble [360 × 7]> #> 3 Africa    <tibble [624 × 7]> #> 4 Americas  <tibble [300 × 7]> #> 5 Oceania   <tibble [24 × 7]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill missing values in a column of nested data frames — nest_fill","title":"Fill missing values in a column of nested data frames — nest_fill","text":"nest_fill() used fill missing values selected columns nested data frames using next previous entries column nested data frames.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill missing values in a column of nested data frames — nest_fill","text":"","code":"nest_fill(   .data,   .nest_data,   ...,   .direction = c(\"down\", \"up\", \"downup\", \"updown\") )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill missing values in a column of nested data frames — nest_fill","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... <tidy-select> Columns fill. .direction Direction fill missing values. Currently either \"\" (default), \"\", \"downup\" (.e. first ) \"updown\" (first ).","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill missing values in a column of nested data frames — nest_fill","text":"object type .data. object column .nest_data chosen columns filled direction specified .direction.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill missing values in a column of nested data frames — nest_fill","text":"nest_fill() wrapper tidyr::fill() maintains functionality fill() within nested data frame. information fill() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill missing values in a column of nested data frames — nest_fill","text":"","code":"set.seed(123) gm <- gapminder::gapminder %>% mutate(pop = if_else(runif(n()) >= 0.9,NA_integer_,pop)) gm_nest <- gm %>% tidyr::nest(country_data = -continent)  gm_nest %>% nest_fill(.nest_data = country_data,pop,.direction = \"down\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows in nested data frames using column values. — nest_filter","title":"Subset rows in nested data frames using column values. — nest_filter","text":"nest_filter() used subset nested data frames, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [. nest_filter() subsets rows within .nest_data, applying expressions ... column values determine rows retained. can applied grouped ungrouped data.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows in nested data frames using column values. — nest_filter","text":"","code":"nest_filter(.data, .nest_data, ..., .preserve = FALSE)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows in nested data frames using column values. — nest_filter","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Expressions return logical value, defined terms variables .nest_data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .preserve Relevant .nest_data grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows in nested data frames using column values. — nest_filter","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows subset input, appear order. Columns modified. number groups may reduced (.preserve TRUE). Data frame attributes preserved.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows in nested data frames using column values. — nest_filter","text":"nest_filter() largely wrapper dplyr::filter() maintains functionality filter() within nested data frame. information filter(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows in nested data frames using column values. — nest_filter","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # apply a filter gm_nest %>%   nest_filter(country_data, year > 1972) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [231 × 5]> #> 2 Europe    <tibble [210 × 5]> #> 3 Africa    <tibble [364 × 5]> #> 4 Americas  <tibble [175 × 5]> #> 5 Oceania   <tibble [14 × 5]>   # apply multiple filters gm_nest %>%   nest_filter(country_data, year > 1972, pop < 10000000) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [78 × 5]>  #> 2 Europe    <tibble [120 × 5]> #> 3 Africa    <tibble [235 × 5]> #> 4 Americas  <tibble [101 × 5]> #> 5 Oceania   <tibble [7 × 5]>      # apply a filter on grouped data gm_nest %>%   nest_group_by(country_data, country) %>%   nest_filter(country_data, pop > mean(pop)) #> # A tibble: 5 × 2 #>   continent country_data         #>   <fct>     <list>               #> 1 Asia      <gropd_df [184 × 5]> #> 2 Europe    <gropd_df [197 × 5]> #> 3 Africa    <gropd_df [271 × 5]> #> 4 Americas  <gropd_df [148 × 5]> #> 5 Oceania   <gropd_df [13 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group nested data frames by one or more variables — nest_group_by","title":"Group nested data frames by one or more variables — nest_group_by","text":"nest_group_by() takes set nested tbls converts set nested grouped tbls operations performed \"group\". nest_ungroup() removes grouping.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group nested data frames by one or more variables — nest_group_by","text":"","code":"nest_group_by(.data, .nest_data, ..., .add = FALSE, .drop = TRUE)  nest_ungroup(.data, .nest_data, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group nested data frames by one or more variables — nest_group_by","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... nest_group_by(), variables computations group . Computations always done ungrouped data frames. perform computations grouped data, need use separate mutate() step group_by(). nest_ungroup(), variables remove grouping. .add FALSE (default), nest_group_by() override existing groups. add existing groups, use .add = TRUE. .drop Drop groups formed factor levels appear data? default TRUE except .nest_data previously grouped .drop = FALSE. See dplyr::group_by_drop_default() details.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group nested data frames by one or more variables — nest_group_by","text":"object type .data. object column .nest_data returned grouped data frame class grouped_df, unless combination ... .add yields empty set grouping columns, case tibble returned.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group nested data frames by one or more variables — nest_group_by","text":"nest_group_by() nest_ungroup() largely wrappers dplyr::group_by() dplyr::ungroup() maintain functionality group_by() ungroup() within nested data frame. information group_by() ungroup(), please refer documentation dplyr.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group nested data frames by one or more variables — nest_group_by","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # grouping doesn't change .nest_data, just .nest_data class: gm_nest_grouped <-   gm_nest %>%   nest_group_by(country_data, year)  gm_nest_grouped #> # A tibble: 5 × 2 #>   continent country_data         #>   <fct>     <list>               #> 1 Asia      <gropd_df [396 × 5]> #> 2 Europe    <gropd_df [360 × 5]> #> 3 Africa    <gropd_df [624 × 5]> #> 4 Americas  <gropd_df [300 × 5]> #> 5 Oceania   <gropd_df [24 × 5]>   # It changes how it acts with other nplyr verbs: gm_nest_grouped %>%   nest_summarise(     country_data,     lifeExp = mean(lifeExp),     pop = mean(pop),     gdpPercap = mean(gdpPercap)   ) #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [12 × 4]> #> 2 Europe    <tibble [12 × 4]> #> 3 Africa    <tibble [12 × 4]> #> 4 Americas  <tibble [12 × 4]> #> 5 Oceania   <tibble [12 × 4]>  # ungrouping removes variable groups: gm_nest_grouped %>% nest_ungroup(country_data) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns in nested data frames — nest_mutate","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":"nest_mutate() adds new variables preserves existing ones within nested data frames .nest_data. nest_transmute() adds new variables drops existing ones nested data frames .nest_data.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":"","code":"nest_mutate(.data, .nest_data, ...)  nest_transmute(.data, .nest_data, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: nest_mutate(): Columns object .nest_data preserved according .keep argument. Existing columns modified ... always returned original location. New columns created ... placed according ..arguments. nest_transmute(): Columns created modified ... returned order specified .... Unmodified grouping columns placed front. number rows affected. Columns given value NULL removed. Groups recomputed grouping variable mutated. Data frame attributes preserved.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":"nest_mutate() nest_transmute() largely wrappers dplyr::mutate() dplyr::transmute() maintain functionality mutate() transmute() within nested data frame. information mutate() transmute(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns in nested data frames — nest_mutate","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # add or modify columns: gm_nest %>%   nest_mutate(     country_data,     lifeExp = NULL,     gdp = gdpPercap * pop,     pop = pop/1000000   ) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>     # use dplyr::across() to apply transformation to multiple columns  gm_nest %>%   nest_mutate(     country_data,     across(c(lifeExp:gdpPercap), mean)   ) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>   # nest_transmute() drops unused columns when mutating: gm_nest %>%   nest_transmute(     country_data,     country = country,     year = year,     pop = pop/1000000   ) #> # A tibble: 5 × 1 #>   country_data       #>   <list>             #> 1 <tibble [396 × 3]> #> 2 <tibble [360 × 3]> #> 3 <tibble [624 × 3]> #> 4 <tibble [300 × 3]> #> 5 <tibble [24 × 3]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested nest join — nest_nest_join","title":"Nested nest join — nest_nest_join","text":"nest_nest_join() returns rows columns .nest_data new nested-df column contains matches y. match, list contains 0-row tibble.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested nest join — nest_nest_join","text":"","code":"nest_nest_join(   .data,   .nest_data,   y,   by = NULL,   copy = FALSE,   keep = FALSE,   name = NULL,   ... )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested nest join — nest_nest_join","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames y data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). character vector variables join join specification created join_by(). NULL, default, nest_*_join() perform natural join, using variables common across object .nest_data y. message lists variables can check correct; suppress message supplying explicitly. join different variables objects .nest_data y, use named vector. example, = c(\"\" = \"b\") match .nest_data$y$b object .nest_data. join multiple variables, use vector length >1. example, = c(\"\", \"b\") match .nest_data$y$.nest_data$b y$b object .nest_data. Use named vector match different variables .nest_data y. example, = c(\"\" = \"b\", \"c\" = \"d\") match .nest_data$y$b .nest_data$c y$d object .nest_data. perform cross-join, generating combinations object .nest_data y, use = character(). copy .nest_data y data source copy = TRUE y copied src .nest_data. (Need review parameter detail applicability nplyr) keep join keys .nest_data y preserved output? name name list column nesting joins create. NULL, name y used. ... One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested nest join — nest_nest_join","text":"object type .data. object column .nest_data also type input.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nested nest join — nest_nest_join","text":"nest_nest_join() largely wrapper around dplyr::nest_join() maintains functionality nest_join() within east nested data frame. information nest_join(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_nest_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested nest join — nest_nest_join","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent) gm_codes <- gapminder::country_codes  gm_nest %>% nest_nest_join(country_data, gm_codes, by = \"country\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 6]> #> 2 Europe    <tibble [360 × 6]> #> 3 Africa    <tibble [624 × 6]> #> 4 Americas  <tibble [300 × 6]> #> 5 Oceania   <tibble [24 × 6]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order within a nested data frame — nest_relocate","title":"Change column order within a nested data frame — nest_relocate","text":"nest_relocate() changes column positions within nested data frame, using syntax nest_select() dplyr::select() make easy move blocks columns .","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order within a nested data frame — nest_relocate","text":"","code":"nest_relocate(.data, .nest_data, ..., .before = NULL, .after = NULL)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order within a nested data frame — nest_relocate","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Columns move. ., .Destination columns selected .... Supplying neither move columns left-hand side; specifying error.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change column order within a nested data frame — nest_relocate","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows affected. columns appear output, (usually) different place. Data frame attributes preserved. Groups affected.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change column order within a nested data frame — nest_relocate","text":"nest_relocate() largely wrapper dplyr::relocate() maintains functionality relocate() within nested data frame. information relocate(), please refer documentation dplyr.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_relocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order within a nested data frame — nest_relocate","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  gm_nest %>% nest_relocate(country_data, year) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>  gm_nest %>% nest_relocate(country_data, pop, .after = year) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns in nested data frames — nest_rename","title":"Rename columns in nested data frames — nest_rename","text":"nest_rename() changes names individual variables using new_name = old_name syntax; nest_rename_with() renames columns using function.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns in nested data frames — nest_rename","text":"","code":"nest_rename(.data, .nest_data, ...)  nest_rename_with(.data, .nest_data, .fn, .cols = dplyr::everything(), ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns in nested data frames — nest_rename","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... nest_rename(): Use new_name = old_name rename selected variables. nest_rename_with(): additional arguments passed onto .fn. .fn function used transform selected .cols. return character vector length input. .cols Columns rename; defaults columns.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns in nested data frames — nest_rename","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows affected. Column names changed; column order preserved. Data frame attributes preserved. Groups updated reflect new names.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename columns in nested data frames — nest_rename","text":"nest_rename() nest_rename_with() largely wrappers dplyr::rename() dplyr::rename_with() maintain functionality rename() rename_with() within nested data frame. information rename() rename_with(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns in nested data frames — nest_rename","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  gm_nest %>% nest_rename(country_data, population = pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>  gm_nest %>% nest_rename_with(country_data, stringr::str_to_lower) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":"nest_replace_na() used replace missing values selected columns nested data frames using values specified column.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":"","code":"nest_replace_na(.data, .nest_data, replace, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames replace list values, one value column NA values replaced. ... Additional arguments tidyr::replace_na() methods. Currently unused.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":"object type .data. object column .nest_data NAs replaced specified columns.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":"nest_replace_na() wrapper tidyr::replace_na() maintains functionality replace_na() within nested data frame. information replace_na() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_replace_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NAs with specified values in a column of nested data frames — nest_replace_na","text":"","code":"set.seed(123) gm <- gapminder::gapminder %>% mutate(pop = if_else(runif(n()) >= 0.9,NA_integer_,pop)) gm_nest <- gm %>% tidyr::nest(country_data = -continent)  gm_nest %>%    nest_replace_na(.nest_data = country_data,                   replace = list(pop = -500)) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 5]> #> 2 Europe    <tibble [360 × 5]> #> 3 Africa    <tibble [624 × 5]> #> 4 Americas  <tibble [300 × 5]> #> 5 Oceania   <tibble [24 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset columns in nested data frames using their names and types — nest_select","title":"Subset columns in nested data frames using their names and types — nest_select","text":"nest_select() selects (optionally renames) variables nested data frames, using concise mini-language makes easy refer variables based name (e.g., :f selects columns left f right). can also use predicate functions like .numeric select variables based properties.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset columns in nested data frames using their names and types — nest_select","text":"","code":"nest_select(.data, .nest_data, ...)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset columns in nested data frames using their names and types — nest_select","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset columns in nested data frames using their names and types — nest_select","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: Rows affect. Output columns subset input columns, potentially different order. Columns renamed new_name = old_name form used. Data frame attributes preserved. Groups maintained; select grouping variables.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset columns in nested data frames using their names and types — nest_select","text":"nest_select() largely wrapper dplyr::select() maintains functionality select() within nested data frame. information select(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset columns in nested data frames using their names and types — nest_select","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  gm_nest %>% nest_select(country_data, country, year, pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 3]> #> 2 Europe    <tibble [360 × 3]> #> 3 Africa    <tibble [624 × 3]> #> 4 Americas  <tibble [300 × 3]> #> 5 Oceania   <tibble [24 × 3]>  gm_nest %>% nest_select(country_data, where(is.numeric)) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 4]> #> 2 Europe    <tibble [360 × 4]> #> 3 Africa    <tibble [624 × 4]> #> 4 Americas  <tibble [300 × 4]> #> 5 Oceania   <tibble [24 × 4]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":"nest_separate() used separate single character column multiple columns using regular expression vector character positions list nested data frames.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":"","code":"nest_separate(   .data,   .nest_data,   col,   into,   sep = \"[^[:alnum:]]+\",   remove = TRUE,   convert = FALSE,   extra = \"warn\",   fill = \"warn\",   ... )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames col Column name position within. Must present data frames .nest_data. passed tidyselect::vars_pull(). argument passed expression supports quasiquotation (can unquote column names column positions). Names new variables create character vector. Use NA omit variable output. sep Separator columns. character, sep interpreted regular expression. default value regular expression matches sequence non-alphanumeric values. numeric, sep interpreted character positions split . Positive values start 1 far-left string; negative value start -1 far-right string. length sep one less . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. extra sep character vector, controls happens many pieces. three valid options: \"warn\" (default): emit warning drop extra values. \"drop\": drop extra values without warning. \"merge\": splits length() times fill sep character vector, controls happens enough pieces. three valid options: \"warn\" (default): emit warning fill right \"right\": fill missing values right \"left\": fill missing values left ... Additional arguments passed tidyr::separate() methods.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":"object type .data. object column .nest_data specified column split according regular expression vector character positions.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":"nest_separate() wrapper tidyr::separate() maintains functionality separate() within nested data frame. information separate() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_separate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns in a column of nested data frames — nest_separate","text":"","code":"set.seed(123) gm <- gapminder::gapminder %>% mutate(comb = paste(continent,year,sep = \"-\")) gm_nest <- gm %>% tidyr::nest(country_data = -continent)  gm_nest %>%    nest_separate(.nest_data = country_data,                 col = comb,                 into = c(\"var1\",\"var2\"),                 sep = \"-\") #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 7]> #> 2 Europe    <tibble [360 × 7]> #> 3 Africa    <tibble [624 × 7]> #> 4 Americas  <tibble [300 × 7]> #> 5 Oceania   <tibble [24 × 7]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows in nested data frames using their positions. — nest_slice","title":"Subset rows in nested data frames using their positions. — nest_slice","text":"nest_slice() lets index rows nested data frames (integer) locations. allows select, remove, duplicate rows. accompanied number helpers common use cases: nest_slice_head() nest_slice_tail() select first last rows nested data frame .nest_data. nest_slice_sample() randomly selects rows data frame .nest_data. nest_slice_min() nest_slice_max() select rows highest lowest values variable within nested data frame .nest_data. .nest_data grouped data frame, operation performed group, (e.g.) nest_slice_head(df, nested_dfs, n = 5) return first five rows group nested data frame.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows in nested data frames using their positions. — nest_slice","text":"","code":"nest_slice(.data, .nest_data, ..., .preserve = FALSE)  nest_slice_head(.data, .nest_data, ...)  nest_slice_tail(.data, .nest_data, ...)  nest_slice_min(.data, .nest_data, order_by, ..., with_ties = TRUE)  nest_slice_max(.data, .nest_data, order_by, ..., with_ties = TRUE)  nest_slice_sample(.data, .nest_data, ..., weight_by = NULL, replace = FALSE)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows in nested data frames using their positions. — nest_slice","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... nest_slice(): Integer row values. Provide either positive values keep, negative values drop. values provided must either positive negative. Indices beyond number rows input silently ignored. nest_slice_helpers(), arguments passed methods. Additionally: n,prop Provide either n, number rows, prop, proportion rows select. neither supplied, n = 1 used. negative value n prop provided, specified number proportion rows removed. n greater number rows group (prop > 1), result silently truncated group size. proportion group size yield integer number rows, absolute value prop*nrow(.nest_data) rounded . .preserve Relevant .nest_data grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping data kept . order_by Variable function variables order . with_ties ties kept together? default, TRUE, may return rows request. Use FALSE ignore ties return first n rows. weight_by Sampling weights. must evaluate vector non-negative numbers length input. Weights automatically standardised sum 1. replace sampling performed (TRUE) without (FALSE, default) replacement?","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows in nested data frames using their positions. — nest_slice","text":"object type .data. object column .nest_data also type input. object .nest_data following properties: row may appear 0, 1, many times output. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows in nested data frames using their positions. — nest_slice","text":"nest_slice() helpers largely wrappers dplyr::slice() helpers maintains functionality slice() helpers within nested data frame. information slice() helpers, please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows in nested data frames using their positions. — nest_slice","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # select the 1st, 3rd, and 5th rows in each data frame in country_data gm_nest %>% nest_slice(country_data, 1, 3, 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [3 × 5]> #> 2 Europe    <tibble [3 × 5]> #> 3 Africa    <tibble [3 × 5]> #> 4 Americas  <tibble [3 × 5]> #> 5 Oceania   <tibble [3 × 5]>  # or select all but the 1st, 3rd, and 5th rows: gm_nest %>% nest_slice(country_data, -1, -3, -5) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [393 × 5]> #> 2 Europe    <tibble [357 × 5]> #> 3 Africa    <tibble [621 × 5]> #> 4 Americas  <tibble [297 × 5]> #> 5 Oceania   <tibble [21 × 5]>   # first and last rows based on existing order: gm_nest %>% nest_slice_head(country_data, n = 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]> gm_nest %>% nest_slice_tail(country_data, n = 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]>  # rows with minimum and maximum values of a variable: gm_nest %>% nest_slice_min(country_data, lifeExp, n = 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]> gm_nest %>% nest_slice_max(country_data, lifeExp, n = 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]>  # randomly select rows with or without replacement: gm_nest %>% nest_slice_sample(country_data, n = 5) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]> gm_nest %>% nest_slice_sample(country_data, n = 5, replace = TRUE) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [5 × 5]> #> 2 Europe    <tibble [5 × 5]> #> 3 Africa    <tibble [5 × 5]> #> 4 Americas  <tibble [5 × 5]> #> 5 Oceania   <tibble [5 × 5]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise each group in nested data frames to fewer rows — nest_summarise","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":"nest_summarise() creates new set nested data frames. one () rows combination grouping variables; grouping variables, output single row summarising observations .nest_data. nested data frame contain one column grouping variable one column summary statistics specified. nest_summarise() nest_summarize() synonyms.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":"","code":"nest_summarise(.data, .nest_data, ..., .groups = NULL)  nest_summarize(.data, .nest_data, ..., .groups = NULL)"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames ... Name-value pairs functions. name name variable result. value can : vector length 1, e.g. min(x), n(), sum(.na(y)). vector length n, e.g., quantile(). data frame, add multiple columns single expression. .groups Grouping structure result. Refer dplyr::summarise() --date information.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":"object type .data. object column .nest_data usually type input. object .nest_data following properties: rows come underlying group_keys() columns combination grouping keys summary expressions provide. grouping structure controlled .groups argument, output may another grouped_df, tibble, rowwise data frame. Data frame attributes preserved, nest_summarise() fundamentally creates new data frame object .nest_data.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":"nest_summarise() largely wrapper dplyr::summarise() maintains functionality summarise() within nested data frame. information summarise(), please refer documentation dplyr.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise each group in nested data frames to fewer rows — nest_summarise","text":"","code":"gm_nest <- gapminder::gapminder %>% tidyr::nest(country_data = -continent)  # a summary applied to an ungrouped tbl returns a single row gm_nest %>%   nest_summarise(     country_data,     n = n(),     median_pop = median(pop)   ) #> # A tibble: 5 × 2 #>   continent country_data     #>   <fct>     <list>           #> 1 Asia      <tibble [1 × 2]> #> 2 Europe    <tibble [1 × 2]> #> 3 Africa    <tibble [1 × 2]> #> 4 Americas  <tibble [1 × 2]> #> 5 Oceania   <tibble [1 × 2]>  # usually, you'll want to group first gm_nest %>%   nest_group_by(country_data, country) %>%   nest_summarise(     country_data,     n = n(),     median_pop = median(pop)   ) #> # A tibble: 5 × 2 #>   continent country_data      #>   <fct>     <list>            #> 1 Asia      <tibble [33 × 3]> #> 2 Europe    <tibble [30 × 3]> #> 3 Africa    <tibble [52 × 3]> #> 4 Americas  <tibble [25 × 3]> #> 5 Oceania   <tibble [2 × 3]>"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite multiple columns into one in a column of nested data frames — nest_unite","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":"nest_unite() used combine multiple columns one column nested data frames.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":"","code":"nest_unite(   .data,   .nest_data,   col,   ...,   sep = \"_\",   remove = TRUE,   na.rm = FALSE )"},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). .nest_data list-column containing data frames col name new column, string symbol. argument passed expression supports quasiquotation (can unquote strings symbols). name captured expression rlang::ensym() (note kind interface symbols represent actual objects now discouraged tidyverse; support backward compatibility). ... Columns unite. sep Separator use values. remove TRUE, remove input columns output data frame. na.rm TRUE, missing values removed prior uniting value.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":"object type .data. object column .nest_data new column created combination existing columns.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":"nest_unite() wrapper tidyr::unite() maintains functionality unite() within nested data frame. information unite() please refer documentation 'tidyr'.","code":""},{"path":[]},{"path":"https://markjrieke.github.io/nplyr/reference/nest_unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite multiple columns into one in a column of nested data frames — nest_unite","text":"","code":"set.seed(123) gm <- gapminder::gapminder  gm_nest <- gm %>% tidyr::nest(country_data = -continent)  gm_nest %>%    nest_unite(.nest_data = country_data,               col = comb,               year,               pop) #> # A tibble: 5 × 2 #>   continent country_data       #>   <fct>     <list>             #> 1 Asia      <tibble [396 × 4]> #> 2 Europe    <tibble [360 × 4]> #> 3 Africa    <tibble [624 × 4]> #> 4 Americas  <tibble [300 × 4]> #> 5 Oceania   <tibble [24 × 4]>"},{"path":"https://markjrieke.github.io/nplyr/reference/personal_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Example survey data regarding personal life satisfaction — personal_survey","title":"Example survey data regarding personal life satisfaction — personal_survey","text":"toy dataset containing 750 responses personal satisfaction survey. responses randomly generated using Qualtrics survey platform.","code":""},{"path":"https://markjrieke.github.io/nplyr/reference/personal_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example survey data regarding personal life satisfaction — personal_survey","text":"","code":"personal_survey"},{"path":"https://markjrieke.github.io/nplyr/reference/personal_survey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example survey data regarding personal life satisfaction — personal_survey","text":"data frame 750 rows 6 variables survey_name name survey Q1 respondent age Q2 city respondent resides Q3 field respondent works Q4 respondent's personal life satisfaction (scale extremely satisfied extremely dissatisfied) Q5 open text response elaborating personal life satisfaction","code":""},{"path":"https://markjrieke.github.io/nplyr/news/index.html","id":"nplyr-020","dir":"Changelog","previous_headings":"","what":"nplyr 0.2.0","title":"nplyr 0.2.0","text":"nest_drop_na() nest_extract() nest_fill() nest_replace_na() nest_separate() nest_unite()","code":""},{"path":"https://markjrieke.github.io/nplyr/news/index.html","id":"nplyr-010","dir":"Changelog","previous_headings":"","what":"nplyr 0.1.0","title":"nplyr 0.1.0","text":"CRAN release: 2022-07-18 nest_arrange() nest_count(), nest_add_count() nest_distinct() nest_filter() nest_group_by(), nest_ungroup() nest_inner_join(), nest_left_join(), nest_right_join(), nest_full_join() nest_semi_join(), nest_anti_join(), nest_nest_join() nest_mutate(), nest_transmute() nest_relocate() nest_rename(), nest_rename_with() nest_select() nest_slice(), nest_slice_head(), nest_slice_tail(), nest_slice_min(), nest_slice_max(), nest_slice_sample() nest_summarise(), nest_summarize()","code":""}]
